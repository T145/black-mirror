<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:c="http://saxon.sf.net/ns/configuration"
           xmlns:saxon="http://saxon.sf.net/"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
           elementFormDefault="qualified"
           targetNamespace="http://saxon.sf.net/ns/configuration">
   <xs:import namespace="http://saxon.sf.net/" schemaLocation="saxon-attributes.xsd"/>

   <xs:element name="configuration">
      <xs:complexType>
         <xs:all>

            <xs:element ref="c:global" minOccurs="0"/>

            <xs:element ref="c:xslt" minOccurs="0"/>

            <xs:element ref="c:xsltPackages" minOccurs="0"/>

            <xs:element ref="c:xquery" minOccurs="0"/>

            <xs:element ref="c:xsd" minOccurs="0"/>

            <xs:element ref="c:serialization" minOccurs="0"/>

            <xs:element ref="c:resources" minOccurs="0"/>

            <xs:element ref="c:collations" minOccurs="0"/>

            <xs:element ref="c:localizations" minOccurs="0"/>
         </xs:all>
         <xs:attribute name="edition" use="optional" type="c:editionType">
            <xs:annotation>
               <xs:documentation> Defines which Saxon edition is to be used. </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="licenseFileLocation" use="optional" type="xs:anyURI">
            <xs:annotation>
               <xs:documentation> Defines the location of the Saxon license file, as a URI relative to
            the base URI of the configuration file. When made absolute, it must use the "file" URI
            scheme. 
          </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="label" type="xs:string">
            <xs:annotation>
               <xs:documentation>A label to identify this configuration or otherwise transmit textual
            information into the execution.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="targetEdition" type="xs:string">
            <xs:annotation>
               <xs:documentation>The target edition if export SEF files are to be used, for example
            targetEdition="JS". Specifically, this affects the recognition of extension namespaces
            (such as the IXSL namespace) when packages in the packageLibrary are compiled.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>

   <xs:element name="global">
      <xs:annotation>
         <xs:documentation> Defines properties of the global configuration. </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="allowedProtocols" use="optional" type="xs:string">
            <xs:annotation>
               <xs:documentation>
                  <p>Defines the protocols (for example "file" and "http" that may be used in URIs resolved
                using Saxon's standard resolvers.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="allowExternalFunctions" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>True if calls to external Java or .NET functions are allowed.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="allowMultiThreading" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>True if <a class="bodylink code" href="/extensions/attributes/threads">saxon:threads</a> attribute on <code>xsl:for-each</code> causes multi-threading
                under Saxon-EE; false to disable multi-threading. Default is true (but
                multi-threading only happens if explicitly requested using
                    <code>saxon:threads</code>).</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="allowOldJavaUriFormat" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>True if reflexive calls to external Java functions are allowed to use the "liberal"
                syntax (for example "http://my.com/extensions/ java.util.Date"). The default is to
                allow only the "strict" form of URI such as "java:java.util.Date".</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="allowStreamabilityExtensions"
                       use="optional"
                       type="xs:boolean">
            <xs:annotation>
               <xs:documentation> Saxon 9.5 only. </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="allowSyntaxExtensions" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Enables use of (experimental and non-conformant) extensions to XPath syntax.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="collationUriResolver"
                       use="optional"
                       type="c:javaClassNameType">
            <xs:annotation>
               <xs:documentation>
                  <p>User-supplied class used to interpret collation URIs.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="collectionFinder" use="optional" type="c:javaClassNameType">
            <xs:annotation>
               <xs:documentation>
                  <p>User-supplied class used for retrieving the <link>net.sf.saxon.lib.ResourceCollection</link> to resolve the URI supplied to the <a class="bodylink code" href="/functions/fn/collection">collection()</a>
                function.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="compileWithTracing" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Generates trace code in the expression tree, allowing a
                    <link>net.sf.saxon.lib.TraceListener</link> to be used at run-time.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="debugByteCode" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Causes bytecode generation to be run in debugging mode, for use when diagnosing a
                problem. Only to be used if requested by Saxonica support.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="debugByteCodeDirectory" use="optional" type="c:fileNameType">
            <xs:annotation>
               <xs:documentation>
                  <p>Identifies the directory for output files produced when <code>displayByteCode</code>
                is set to true.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="defaultCollation" use="optional" type="xs:anyURI">
            <xs:annotation>
               <xs:documentation>
                  <p>(Requires Saxon-PE.) The collation URI to be used when no explicit collation is
                requested.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="defaultCollection" use="optional" type="xs:anyURI">
            <xs:annotation>
               <xs:documentation>
                  <p>The collection URI to be used when no argument is passed to the <a class="bodylink code" href="/functions/fn/collection">collection()</a>
                function.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="defaultRegexEngine" use="optional" type="c:regexEngineType">
            <xs:annotation>
               <xs:documentation>
                  <p>Determines which regular expression engine should be used for evaluating regular expressions.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="displayByteCode" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Causes files containing a human-readable print of the generated bytecode to be
                output, to the directory identified by the <code>debugByteCodeDir</code> option.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="dtdValidation" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Controls whether DTD validation is applied to input files.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="dtdValidationRecoverable" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Controls whether DTD validation errors are recoverable or fatal.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="eagerEvaluation" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Forces Saxon to do eager evaluation of expressions in contexts where normally it would do lazy evaluation,
            for example when evaluating variables and function results. This can make for easier debugging.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="entityResolver" use="optional" type="c:javaClassNameType">
            <xs:annotation>
               <xs:documentation>
                  <p>The class used whenever Saxon creates an <code>XMLReader</code> for parsing source
                documents.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="environmentVariableResolver"
                       use="optional"
                       type="c:javaClassNameType">
            <xs:annotation>
               <xs:documentation>
                  <p>Defines the environment variable resolver for all queries and transforms using this
                configuration. This affects the result of the XPath functions <a class="bodylink code"
                        href="/functions/fn/available-environment-variables">available-environment-variables()</a> and <a class="bodylink code" href="/functions/fn/environment-variable">environment-variable()</a>. </p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="errorListener" use="optional" type="c:javaClassNameType">
            <xs:annotation>
               <xs:documentation>
                  <p>Defines the default <code>ErrorListener</code> for reporting both compile-time and
                run-time errors.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="expandAttributeDefaults" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Controls whether attribute default values found in a DTD or schema are expanded or
                not.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="generateByteCode" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>By default, Saxon-EE attempts to generate Java bytecode for evaluation of certain
                parts of a query or stylesheet. Setting this option to false disables this.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="ignoreSAXSourceParser" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Set to true to ignore the <code>XMLReader</code> supplied as a <code>SAXSource</code>
                as input to an XSLT transformation, to use one specified by the <code>parser</code>
                option instead.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="lazyConstructionMode" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>If true, causes temporary trees to be constructed lazily.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="lineNumbering" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Controls whether line and column number information is maintained for input
                files.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="markDefaultedAttributes" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Indicates that Saxon should retain the fact that attributes are derived
            from defaults defined in a schema or DTD where this information is available from the XML parser.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="maxCompiledClasses"
                       use="optional"
                       type="xs:nonNegativeInteger">
            <xs:annotation>
               <xs:documentation>
                  <p>Places a limit on the number of classes for which Saxon will generate bytecode.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="monitorHotSpotByteCode" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Enables monitoring of hot-spot byte-code generation.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="optimizationLevel" use="optional" type="xs:integer">
            <xs:annotation>
               <xs:documentation>
                  <p>Defines the level of code optimization to be applied.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="parser" use="optional" type="c:javaClassNameType">
            <xs:annotation>
               <xs:documentation>
                  <p>XML parser used for source documents.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="preEvaluateDoc" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>If true, allows calls on <a class="bodylink code" href="/functions/fn/doc">doc()</a>
                with a literal argument to be evaluated early, at compile time.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="preferJaxpParser" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Relevant only on .NET, determines whether the Java Classpath parser is used in
                preference to the Microsoft .NET parser.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="recognizeUriQueryParameters" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>If true, and the standard <code>URIResolver</code> is in use, query parameters such
                as <code>val=strict</code> will be recognized on URIs supplied to the <a class="bodylink code" href="/functions/fn/doc">doc()</a> or <a class="bodylink code" href="/functions/fn/document">document()</a>
                functions.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="regexBacktrackingLimit" use="optional" type="xs:integer">
            <xs:annotation>
               <xs:documentation>
                  <p>Sets a limit on the amount of backtracking performed during regular expression evaluation.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="retainNodeForDiagnostics" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Indicates that the location information held in the run-time expression tree should retain links to nodes in the
            original stylesheet tree.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="schemaValidation"
                       use="optional"
                       type="c:schemaValidationType">
            <xs:annotation>
               <xs:documentation>
                  <p>Controls whether schema validation is applied to input files.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="serializerFactory" use="optional" type="c:javaClassNameType">
            <xs:annotation>
               <xs:documentation>
                  <p>Allows the serialization pipeline to be customized, for example to handle
                user-defined serialization parameters.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="sourceResolver" use="optional" type="c:javaClassNameType">
            <xs:annotation>
               <xs:documentation>
                  <p>Name of a user-supplied class that resolves unknown implementations of the JAXP
                    <code>Source</code> class into a known implementation.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="stableCollectionUri" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Indicates that collections read using the <code>fn:collection()</code> function are
                to be stable, that is, repeated calls with the same collection URI return identical
                results.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="stableUnparsedText" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Indicates that unparsed text files read using functions such as
                    <code>fn:unparsed-text()</code>, <code/>function are to be stable, that is,
                repeated calls with the same URI return identical results.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="standardErrorOutputFile" use="optional" type="c:fileNameType">
            <xs:annotation>
               <xs:documentation>
                  <p>Redirects output which would otherwise go to the stardard error output stream
                    <code>System.err</code>, to this file.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="streamability" use="optional" type="c:streamabilityType">
            <xs:annotation>
               <xs:documentation>
                  <p>Determines the test applied to see if constructs are streamable (if streaming is
                requested).</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="streamingFallback" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>If true, then constructs for which streaming is requested will be exectued in
                non-streaming mode if the code is not actually streamable.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="stripSpace" use="optional" type="c:stripSpaceType">
            <xs:annotation>
               <xs:documentation>
                  <p>Controls what whitespace is removed from input documents (all inter-element
                whitespace, no inter-element whitespace, or all inter-element whitespace in elements
                having element-only content models).</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleParser" use="optional" type="c:javaClassNameType">
            <xs:annotation>
               <xs:documentation>
                  <p>XML parser used for stylesheets and schema documents.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="suppressEvaluationExpiryWarning"
                       use="optional"
                       type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Suppresses the warning issued to indicate that an evaluation license in use is due to
                expire.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="suppressXPathWarnings" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Suppresses all warnings issued by the XPath and XQuery parsers.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="suppressXsltNamespaceCheck" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Suppresses the warning when there is no commonality between the namespaces used in
                stylesheet match patterns and the namespaces used in the source document.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="thresholdForFunctionInlining"
                       use="optional"
                       type="xs:integer">
            <xs:annotation>
               <xs:documentation>
                  <p>Defines a limit on the size of user-defined functions that will be inlined.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="thresholdForHotspotByteCode" use="optional" type="xs:integer">
            <xs:annotation>
               <xs:documentation>
                  <p>Defines how many times a code fragment must be executed before bytecode generation kicks in.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="timing" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Outputs progress messages to <code>System.err</code>. Equivalent to the
                    <code>-t</code> option on the command line.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="traceExternalFunctions" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Provides diagnostics when external functions are dynamically loaded.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="traceListener" use="optional" type="c:javaClassNameType">
            <xs:annotation>
               <xs:documentation>
                  <p>User-defined class to be used for handling run-time trace output.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="traceListenerOutputFile" use="optional" type="c:fileNameType">
            <xs:annotation>
               <xs:documentation>
                  <p>Supplies a file as destination for trace listener output.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="traceOptimizerDecisions" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Causes tracing of decisions made by the optimizer.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="treeModel" use="optional" type="c:treeModelType">
            <xs:annotation>
               <xs:documentation>
                  <p>Determines the tree model implementation used for input files: TinyTree, LinkedTree,
                or TinyTree(condensed).</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="unparsedTextURIResolver"
                       use="optional"
                       type="c:javaClassNameType">
            <xs:annotation>
               <xs:documentation>
                  <p>The class name of the <code>UnparsedTextURIResolver</code> to be used for deferencing
                URIs used in calls on <code>fn:unparsed-text()</code> and related functions.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="uriResolver" use="optional" type="c:javaClassNameType">
            <xs:annotation>
               <xs:documentation>
                  <p>The <code>URIResolver</code> to be used for deferencing URIs used in <a class="bodylink code" href="/xsl-elements/include">xsl:include</a>, <a class="bodylink code" href="/xsl-elements/import">xsl:import</a>, <a class="bodylink code" href="/functions/fn/doc">doc()</a>, and <a class="bodylink code" href="/functions/fn/document">document()</a>.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="usePiDisableOutputEscaping" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>When sending output to a user-defined content handler, indicates whether JAXP-defined
                processing instructions are used to signal the start and end of text in which output
                escaping is disabled.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="useTypedValueCache" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>If true, typed values of element and attribute nodes are cached in the TinyTree. Uses
                extra memory, may make execution faster.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="validationComments" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Only relevant when <code>validationWarnings=true</code>, indicates that validation
                error messages should where possible be added as comments in the document instance
                being validated rather than fatal errors.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="validationWarnings" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>For result trees subjected to schema validation, indicates whether validation
                failures should be treated as warnings rather than fatal errors.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="versionOfXml" use="optional" type="xs:decimal">
            <xs:annotation>
               <xs:documentation>
                  <p>Determines whether XML 1.0 or XML 1.1 rules are used for names. (1.0 means the rules
                before Edition 5.)</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="xInclude" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Controls whether XInclude processing is applied to input files.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="xpathVersionForXsd" use="optional" type="xs:integer">
            <xs:annotation>
               <xs:documentation>
                  <p>Defines what version of the XPath language may be used in XML Schema 1.1 assertions and type alternatives.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="xpathVersionForXslt" use="optional" type="xs:integer">
            <xs:annotation>
               <xs:documentation>
                  <p>Defines what version of the XPath language may be used in XSLT 3.0 stylesheets.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>

   <xs:element name="xslt">
      <xs:annotation>
         <xs:documentation> Defines configuration properties specific to XSLT processing.
      </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>

            <xs:element ref="c:extensionElement" minOccurs="0" maxOccurs="unbounded"/>
         </xs:sequence>
         <xs:attribute name="disableXslEvaluate" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>If set, the use of the <code>xsl:evaluate</code> instruction in XSLT 3.0
                is disabled.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="enableAssertions" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Indicates whether assertions (XSLT 3.0 xsl:assert instructions) are enabled.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="initialMode" use="optional" type="c:EQName">
            <xs:annotation>
               <xs:documentation>
                  <p>The name of a mode within a stylesheet in which execution should begin.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="initialTemplate" use="optional" type="c:EQName">
            <xs:annotation>
               <xs:documentation>
                  <p>The name of a named template within a stylesheet where execution should begin.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="messageEmitter" use="optional" type="c:javaClassNameType">
            <xs:annotation>
               <xs:documentation>
                  <p>Destination of <a class="bodylink code" href="/xsl-elements/message">xsl:message</a>
                output.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="outputUriResolver" use="optional" type="c:javaClassNameType">
            <xs:annotation>
               <xs:documentation>
                  <p>Handles documents written using <a class="bodylink code" href="/xsl-elements/result-document">xsl:result-document</a>. </p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="recoveryPolicy" use="optional" type="c:recoveryPolicyType">
            <xs:annotation>
               <xs:documentation>
                  <p>Indicates how XSLT recoverable errors are handled (for example, ambiguous template
                rules).</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="resultDocumentThreads" use="optional" type="xs:integer">
            <xs:annotation>
               <xs:documentation>
                  <p>Indicates the maximum number of threads to be used for processing
                <code>xsl:result-document</code> instructions in parallel.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="schemaAware" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Indicates whether stylesheet should be compiled to be able to handle schema-typed
                input, even if they contain no <a class="bodylink code" href="/xsl-elements/import-schema">xsl:import-schema</a> declaration.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="staticErrorListener"
                       use="optional"
                       type="c:javaClassNameType">
            <xs:annotation>
               <xs:documentation>
                  <p>Receives reports of compile-time errors in a stylesheet.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="staticUriResolver" use="optional" type="c:javaClassNameType">
            <xs:annotation>
               <xs:documentation>
                  <p>User-defined class for dereferencing URIs on <a class="bodylink code" href="/xsl-elements/include">xsl:include</a> or <a class="bodylink code" href="/xsl-elements/import">xsl:import</a>. </p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="strictStreamability" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Causes the XSLT processor to verify that constructs that are declared streamable are
                in fact "guaranteed streamable" according to the W3C rules.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="styleParser" use="optional" type="c:javaClassNameType">
            <xs:annotation>
               <xs:documentation>
                  <p>XML parser used for stylesheets and schema documents.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="version" use="optional" type="xs:decimal">
            <xs:annotation>
               <xs:documentation>
                  <p>XSLT language version to be supported by the processor. From Saxon 9.8, an XSLT 3.0
                processor is always used by default. So setting this property has no effect.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="versionWarning" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>False suppresses the warning produced when the XSLT processor version is not the same
                as the version in the <code>xsl:stylesheet</code> element. From Saxon 9.8, the
                warning is no longer output, so this attribute is ignored.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>

   <xs:element name="extensionElement">
      <xs:annotation>
         <xs:documentation> Describes a user-supplied library of XSLT extension instructions.
      </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="factory" use="optional" type="c:javaClassNameType">
            <xs:annotation>
               <xs:documentation> The Java class that implements the extension instructions.
          </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="namespace" use="optional" type="xs:anyURI">
            <xs:annotation>
               <xs:documentation> The namespace URI of the extension instructions implemented by this
            extension library. </xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>

   <xs:element name="xsltPackages">
      <xs:annotation>
         <xs:documentation> Defines configuration properties specific to XSLT processing with packages.
      </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>

            <xs:element ref="c:package" minOccurs="0" maxOccurs="unbounded"/>
         </xs:sequence>
      </xs:complexType>
   </xs:element>

   <xs:element name="package">
      <xs:annotation>
         <xs:documentation> Defines an XSLT 3.0 package, or version of a package.
      </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>

            <xs:element ref="c:withParam" minOccurs="0" maxOccurs="unbounded"/>
         </xs:sequence>
         <xs:attribute name="name" use="required" type="xs:anyURI">
            <xs:annotation>
               <xs:documentation>
                  <p>The package name. Must match the value in the <code>name</code> attribute of the <code>xsl:package</code> element,
                unless the <code>base</code> attribute is present. When <code>xsl:use-package</code> searches for an appropriate package to use,
                it is this name that will be matched.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="version" use="required" type="xs:string">
            <xs:annotation>
               <xs:documentation>
                  <p>The package version. Required. The numeric part of the version number must match the value in the <code>package-version</code> 
                attribute of the <code>xsl:package</code> element; the NamePart (if any) can differ. When <code>xsl:use-package</code>
                searches for an appropriate package to use, it is the version number in the configuration file that is used, not the version
                in the XSLT source.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="base" use="optional" type="xs:anyURI">
            <xs:annotation>
               <xs:documentation>
                  <p>The original package name. Required only if the package name defined in the <code>name</code> attribute differs from the
                package name in the XSLT source. If present, the value must match the package name defined in the XSLT source. Using this
                attribute allows packages to be renamed. This is useful when a package has static parameters whose values are bound in child
                <code>withParam</code> elements: it allows two instances of a package to be made available (under different names) with different
                bindings for the static parameters.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="exportLocation" use="optional" type="xs:anyURI">
            <xs:annotation>
               <xs:documentation>
                  <p>The location (relative to the configuration file) of a representation of this package in SEF (stylesheet export format) form.
                If this attribute is present then the SEF form will always be used in preference to the source form; the <code>sourceLocation</code> is then ignored,
                and it is an error if any <code>withParam</code> children are present (because static parameters will have been bound when the SEF was created).                
                It is entirely a user responsibility to keep the SEF form up-to-date with changes to the source.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="priority" use="optional" type="xs:integer">
            <xs:annotation>
               <xs:documentation>
                  <p>Used when there are several versions of a package available and the client does not specify which version to use. The value
                must be an integer. Versions
                with higher priority are preferred over versions with lower priority or unspecified priority; if the priorities are equal (or unspecified) 
                then the highest available version is used. The rules for ordering of version numbers are given in section §3.5.1 of the
                W3C specification.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="shortName" use="optional" type="xs:string">
            <xs:annotation>
               <xs:documentation>
                  <p>Any convenient short name for the package name/version combination. This can be used for convenience 
                as the value of the <code>-xsl</code> option on the <code>Transform</code> command line. (We suggest using a value that
                is unlikely to be confused with a filename, for example <code>*</code> if the same stylesheet package is used all the time.)</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="sourceLocation" use="optional" type="xs:anyURI">
            <xs:annotation>
               <xs:documentation>
                  <p>The location (relative to the configuration file) of the source XSLT code of the top-level module of the package.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>

   <xs:element name="withParam">
      <xs:annotation>
         <xs:documentation> Supplies values of static stylesheet parameters used during package
        compilation.
      </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="name" use="required" type="c:EQName">
            <xs:annotation>
               <xs:documentation>
                  <p>The parameter name.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="select" use="required" type="c:exprType">
            <xs:annotation>
               <xs:documentation>
                  <p>An XPath expression that is evaluated to give the value of the parameter (so a boolean parameter might be written
                <code>select="true()"</code>, while a string parameter would be expressed as <code>select="'London'"</code>).</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>

   <xs:element name="xquery">
      <xs:annotation>
         <xs:documentation> Defines configuration properties specific to XQuery processing.
      </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="allowUpdate" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Indicates whether XQuery Update syntax is accepted.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="constructionMode"
                       use="optional"
                       type="c:constructionModeType">
            <xs:annotation>
               <xs:documentation>
                  <p>Default value for construction mode in the static context.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="defaultElementNamespace" use="optional" type="xs:anyURI">
            <xs:annotation>
               <xs:documentation>
                  <p>Default namespace for elements and types.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="defaultFunctionNamespace" use="optional" type="xs:anyURI">
            <xs:annotation>
               <xs:documentation>
                  <p>Default namespace for functions.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="emptyLeast" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>True if the empty sequence comes first in sort order.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="inheritNamespaces" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Default value for "inherit namespaces" in the static context.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="moduleUriResolver" use="optional" type="c:javaClassNameType">
            <xs:annotation>
               <xs:documentation>
                  <p>Used for locating query modules referenced by "import module".</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="multipleModuleImports" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>If set to true, the XQuery processor attempts to fetch an XQuery module appearing in
                an <code>import module</code> directive, whether or not a module with that module
                URI has already been loaded, unless the location URI of the existing module is the
                same as that of the requested module.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="preserveBoundarySpace" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Policy for preserving boundary space within direct element content.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="preserveNamespaces" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Default value for "preserve namespaces" in the static context.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="requiredContextItemType" use="optional" type="c:itemTypeType">
            <xs:annotation>
               <xs:documentation>
                  <p>The required type for the context item.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="schemaAware" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>True if the query makes use of schema information.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="staticErrorListener"
                       use="optional"
                       type="c:javaClassNameType">
            <xs:annotation>
               <xs:documentation>
                  <p>Receives notification of static errors occurring in a Query.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="version" use="optional" type="xs:decimal">
            <xs:annotation>
               <xs:documentation>
                  <p>Indicates whether XQuery 3.0 or 3.1 syntax is accepted. From Saxon 9.8, an XQuery 3.1
                processor is always used by default. So setting this property has no effect.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>

   <xs:element name="xsd">
      <xs:annotation>
         <xs:documentation> Defines configuration properties specific to XML Schema processing.
      </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="allowUnresolvedSchemaComponents"
                       use="optional"
                       type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Indicates that the presence of an unresolved component reference in a schema
        document does not automatically make the schema document invalid.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="assertionsCanSeeComments" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Determines whether comment and processing instructions in a document being validated
                are visible to assertions in an XSD 1.1 schema.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="implicitSchemaImports" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>If true, allows a schema document to reference components in a different target namespace without an explicit
                <code>xs:import</code> declaration, provided the referenced components are already known.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="multipleSchemaImports" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>If set to true, the schema processor attempts to fetch a schema document appearing in
                an <code>xs:import</code> directive, whether or not a schema for that namespace has
                already been loaded.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="occurrenceLimits"
                       use="optional"
                       type="c:occurrenceLimitsType">
            <xs:annotation>
               <xs:documentation>
                  <p>Controls the limits applied to <code>minOccurs</code> and <code>maxOccurs</code>
                values in XSD content models.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="schemaUriResolver" use="optional" type="c:javaClassNameType">
            <xs:annotation>
               <xs:documentation>
                  <p>Controls the handling of URIs in <code>xs:include</code>, <code>xs:import</code> etc.
                declarations, and also in <code>xsi:schemaLocation</code>. </p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="thresholdForCompilingTypes"
                       use="optional"
                       type="xs:nonNegativeInteger">
            <xs:annotation>
               <xs:documentation>
                  <p>Indicates how often an XSD simple type definition must be used before Saxon generates
                bytecode to implement validation of input data against that type.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="useXsiSchemaLocation" use="optional" type="xs:boolean">
            <xs:annotation>
               <xs:documentation>
                  <p>Indicates whether the schema processor takes account of
                    <code>xsi:schemaLocation</code> and <code>xsi:noNamespaceSchemaLocation</code>
                attributes appearing in the instance document.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="version" use="optional" type="xs:decimal">
            <xs:annotation>
               <xs:documentation>
                  <p>Indicates whether XSD 1.1 syntax is accepted.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>

   <xs:element name="serialization">
      <xs:annotation>
         <xs:documentation> Defines defaults for serialization properties. </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="allow-duplicate-names" use="optional" type="c:yesOrNoType">
            <xs:annotation>
               <xs:documentation>
                  <p>Used only for JSON output. Determines whether duplicate keys with the
                same string value are allowed in a JSON map; if not an error is raised.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="byte-order-mark" use="optional" type="c:yesOrNoType">
            <xs:annotation>
               <xs:documentation>
                  <p>Indicates whether serialized output should include a byte order mark.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="cdata-section-elements"
                       use="optional"
                       type="c:listOfQNameType">
            <xs:annotation>
               <xs:documentation>
                  <p>A list of element names whose content is to be serialized using CDATA sections.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="doctype-public" use="optional" type="xs:string">
            <xs:annotation>
               <xs:documentation>
                  <p>The public identifier to be used in the DOCTYPE declaration.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="doctype-system" use="optional" type="xs:anyURI">
            <xs:annotation>
               <xs:documentation>
                  <p>The system identifier (URI) to be used in the DOCTYPE declaration.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="encoding" use="optional" type="xs:string">
            <xs:annotation>
               <xs:documentation>
                  <p>The output encoding, for example utf-8 or us-ascii.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="escape-uri-attributes" use="optional" type="c:yesOrNoType">
            <xs:annotation>
               <xs:documentation>
                  <p>Defines whether URI-valued attributes in HTML/XHTML (for example href)
                are to be %HH-encoded.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="html-version" use="optional" type="xs:decimal">
            <xs:annotation>
               <xs:documentation>
                  <p>When the output method is HTML or XHTML, then if this attribute takes 
                decimal value 5.0, then the output produced is HTML 5.0 or XHTML 5.0 respectively.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="include-content-type" use="optional" type="c:yesOrNoType">
            <xs:annotation>
               <xs:documentation>
                  <p>Defines whether a &lt;meta&gt; element should be added to the
                HTML &lt;head&gt; element to identify the media type of the output.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="indent" use="optional" type="c:yesOrNoType">
            <xs:annotation>
               <xs:documentation>
                  <p>Defines whether indentation is to be added to the output.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="item-separator" use="optional" type="xs:string">
            <xs:annotation>
               <xs:documentation>
                  <p>Defines separator to be used between items in serialized output.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="json-node-output-method" use="optional" type="xs:QName">
            <xs:annotation>
               <xs:documentation>
                  <p>Used only for JSON output. Defines the serialization method for nodes, 
                for example 'xml' or 'html' or 'text'.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="media-type" use="optional" type="xs:string">
            <xs:annotation>
               <xs:documentation>
                  <p>Defines the media type (MIME type) of the output.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="method" use="optional" type="xs:QName">
            <xs:annotation>
               <xs:documentation>
                  <p>Defines the serialization method, for example 'xml' or 'html' or 'text'.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="normalization-form" use="optional" type="xs:string">
            <xs:annotation>
               <xs:documentation>
                  <p>Defines whether Unicode normalization should be applied during serialization,
                and if so, which Unicode normalization form should be used.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="omit-xml-declaration" use="optional" type="c:yesOrNoType">
            <xs:annotation>
               <xs:documentation>
                  <p>Defines whether the XML declaration should be omitted from XML output.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="standalone" use="optional" type="c:yesOrNoOrOmitType">
            <xs:annotation>
               <xs:documentation>
                  <p>Defines whether the XML declaration in XML output should have a 'standalone' attribute.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="suppress-indentation" use="optional" type="c:listOfQNameType">
            <xs:annotation>
               <xs:documentation>
                  <p>Defines a list of element names whose content should not be indented
                even when indent='yes' is specified.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="undeclare-prefixes" use="optional" type="c:yesOrNoType">
            <xs:annotation>
               <xs:documentation>
                  <p>Defines whether namespaces present on a parent element but not on
                its children should be undeclared using XML Namespaces 1.1 syntax.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="use-character-maps" use="optional" type="c:listOfQNameType">
            <xs:annotation>
               <xs:documentation>
                  <p>Defines a list of the names of character maps which will be 
                applied to transform individual characters during serialization.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="version" use="optional" type="xs:string">
            <xs:annotation>
               <xs:documentation>
                  <p>Defines the version of XML or HTML to be used for the output.</p>
               </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:anyAttribute namespace="##other" processContents="lax"/>
      </xs:complexType>
   </xs:element>

   <xs:element name="resources">
      <xs:annotation>
         <xs:documentation> Defines additional classes available for integration purposes.
      </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:choice minOccurs="0" maxOccurs="unbounded">

            <xs:element ref="c:externalObjectModel"/>

            <xs:element ref="c:extensionFunction"/>

            <xs:element ref="c:fileExtension"/>

            <xs:element ref="c:schemaDocument"/>

            <xs:element ref="c:schemaComponentModel"/>
         </xs:choice>
      </xs:complexType>
   </xs:element>

   <xs:element name="externalObjectModel" type="c:javaClassNameType">
      <xs:annotation>
         <xs:documentation> Defines an external object model (tree representation). The content is the
        name of a Java class that implements <code>net.sf.saxon.lib.ExternalObjectModel</code>.
      </xs:documentation>
      </xs:annotation>
   </xs:element>

   <xs:element name="extensionFunction" type="c:javaClassNameType">
      <xs:annotation>
         <xs:documentation> Defines an external function, implemented in Java, that can be called from
        within an XPath expression. The content is the name of a Java class that implements
        <code>net.sf.saxon.lib.ExtensionFunctionDefinition</code>. </xs:documentation>
      </xs:annotation>
   </xs:element>

   <xs:element name="fileExtension">
      <xs:annotation>
         <xs:documentation> Defines a mapping from file extensions to media types. </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="extension" use="required" type="xs:string">
            <xs:annotation>
               <xs:documentation> A file extension, for example "xq". </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="mediaType" use="required" type="xs:string">
            <xs:annotation>
               <xs:documentation> A media type corresponding to the file extension, for example
            "text/plain". The media types that are recognised by default are: application/xml,
            text/xml, application/html, text/html, application/atom, application/xml+xslt, and
            application/xml+xsd (which return an XML node); text/plain, and application/java (which
            return a string); application/binary (returns base64Binary); and application/json
            (returns the result of parsing the JSON, typically a map or array).</xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>

   <xs:element name="schemaDocument" type="xs:anyURI">
      <xs:annotation>
         <xs:documentation> Provides the location of a schema document that will be preloaded into the
        configuration and made available to all queries and stylesheets. </xs:documentation>
      </xs:annotation>
   </xs:element>

   <xs:element name="schemaComponentModel" type="xs:anyURI">
      <xs:annotation>
         <xs:documentation> Provides the location of a schema in Saxon's SCM format that will be
        preloaded into the configuration and made available to all queries and stylesheets.
      </xs:documentation>
      </xs:annotation>
   </xs:element>

   <xs:element name="collations">
      <xs:annotation>
         <xs:documentation> Defines collation URIs for use in queries and stylesheets.
      </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>

            <xs:element maxOccurs="unbounded" ref="c:collation"/>
         </xs:sequence>
      </xs:complexType>
   </xs:element>

   <xs:element name="collation">
      <xs:annotation>
         <xs:documentation> Defines a collation URI for use in queries and stylesheets.
      </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="uri" use="required" type="xs:anyURI">
            <xs:annotation>
               <xs:documentation> The collation URI as used in queries and stylesheets.
          </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="alphanumeric" use="optional" type="c:yesOrNoOrCodepointType">
            <xs:annotation>
               <xs:documentation> Indicates whether a sequence of digits within a string is to be treated
            as a number, so that AB100 sorts after AB99. </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="case-order" use="optional" type="c:caseOrderType">
            <xs:annotation>
               <xs:documentation> Indicates whether lower-case letters sort before or after upper-case.
          </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="class" use="optional" type="c:javaClassNameType">
            <xs:annotation>
               <xs:documentation> The name of a Java class that performs the string comparison.
          </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="decomposition" use="optional" type="c:decompositionType">
            <xs:annotation>
               <xs:documentation> Indicates whether composite (accented) Unicode characters should be
            decomposed before sorting. </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="ignore-case" use="optional" type="c:yesOrNoType">
            <xs:annotation>
               <xs:documentation> Indicates whether differences of case are to be ignored during
            comparisons. </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="ignore-modifiers" use="optional" type="c:yesOrNoType">
            <xs:annotation>
               <xs:documentation> Indicates whether modifiers (such as accents and diacritical marks) are
            to be ignored during comparisons. </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="ignore-symbols" use="optional" type="c:yesOrNoType">
            <xs:annotation>
               <xs:documentation> Indicates whether punctuation symbols are to be ignored during
            comparisons (.NET only). </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="ignore-width" use="optional" type="c:yesOrNoType">
            <xs:annotation>
               <xs:documentation> Indicates whether width differences between characters are to be
            ignored during comparisons. </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="lang" use="optional" type="xs:language">
            <xs:annotation>
               <xs:documentation> Indicates the natural language of the text, for example 'en' for
            English or 'de' for German. </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="rules" use="optional" type="xs:string">
            <xs:annotation>
               <xs:documentation> Provides detailed sorting rules in the format of the Java
            RuleBasedCollator class. </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="strength" use="optional" type="c:strengthType">
            <xs:annotation>
               <xs:documentation> The strength of the collation: primary, secondary, or tertiary. These
            terms are described in the Unicode Collation Algorithm. </xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>

   <xs:element name="localizations">
      <xs:annotation>
         <xs:documentation> Defines localization of the output of format-date(), format-number(), and
        xsl:number. Note this relates to Saxon's native localization and has no effect when ICU
        localization is used. </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>

            <xs:element maxOccurs="unbounded" ref="c:localization"/>
         </xs:sequence>
         <xs:attribute name="defaultCountry" use="optional" type="xs:NCName">
            <xs:annotation>
               <xs:documentation> The default country code for format-date() and similar functions. For
            example 'FR' for France. </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="defaultLanguage" use="optional" type="xs:NCName">
            <xs:annotation>
               <xs:documentation> The default language code for format-date() and similar functions. For
            example 'en-GB' for British English. </xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>

   <xs:element name="localization">
      <xs:annotation>
         <xs:documentation> Defines localization of the output of format-date(), format-number(), and
        xsl:number for a specific language. </xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:attribute name="lang" use="required" type="xs:language">
            <xs:annotation>
               <xs:documentation> The language to which this localization applies, for example 'fr-CA'
            for Canadian French. </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:attribute name="class" use="optional" type="c:javaClassNameType">
            <xs:annotation>
               <xs:documentation> The Java class used to perform the localization. </xs:documentation>
            </xs:annotation>
         </xs:attribute>
         <xs:anyAttribute namespace="##other" processContents="lax">
            <xs:annotation>
               <xs:documentation> Additional attributes are passed to the user-defined LocalizerFactory
            in a Properties object, the propety names are the local names of the attributes, and the
            namespace is ignored. </xs:documentation>
            </xs:annotation>
         </xs:anyAttribute>
      </xs:complexType>
   </xs:element>
   <xs:simpleType name="constructionModeType">
      <xs:annotation>
         <xs:documentation>
            <p>Defines how an XQuery processor will handle whitespace in element constructors. One
          of: strip (whitespace in the query is ignored), preserve (whitespace in the query is
          copied to the result tree).</p>
         </xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="strip">
            <xs:annotation>
               <xs:documentation> Whitespace in element constructors is ignored </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="preserve">
            <xs:annotation>
               <xs:documentation> Whitespace in element constructors is copied to the result tree
          </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="caseOrderType">
      <xs:annotation>
         <xs:documentation> Used for the case-order property of a collation: defines whether lower-case
        collates before or after upper-case, other things being equal. One of: upper-first,
        lower-first, #default. </xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="upper-first">
            <xs:annotation>
               <xs:documentation> Upper-case precedes lower-case in sort order </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="lower-first">
            <xs:annotation>
               <xs:documentation> Lower-case precedes upper-case in sort order </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="#default">
            <xs:annotation>
               <xs:documentation> This value imposes no constraints </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="decompositionType">
      <xs:annotation>
         <xs:documentation> Used for the decomposition property of a collation: defines whether a
        string is converted to decomposed normal form before comparisons are made, and if so, which
        form is to be used. One of: none, standard, full. </xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="none">
            <xs:annotation>
               <xs:documentation> No decomposition of Unicode combining characters is performed before
            sorting </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="standard">
            <xs:annotation>
               <xs:documentation> Standard decomposition of Unicode combining characters is performed
            before sorting </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="full">
            <xs:annotation>
               <xs:documentation> Full decomposition of Unicode combining characters is performed before
            sorting </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="editionType">
      <xs:annotation>
         <xs:documentation> Code describing a Saxon product edition. One of: HE (Home Edition), PE
        (Professional Edition), EE (Enterprise Edition). </xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="HE">
            <xs:annotation>
               <xs:documentation> Saxon Home Edition </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="PE">
            <xs:annotation>
               <xs:documentation> Saxon Professional Edition </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="EE">
            <xs:annotation>
               <xs:documentation> Saxon Enterprise Edition </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="EQName">
      <xs:annotation>
         <xs:documentation>
            <p>An extended QName. This may be either a local name, or a prefixed QName, or a name
          written using Clark notation (allowing either {uri}local or the extended QName notation
          Q{uri}local).</p>
         </xs:documentation>
      </xs:annotation>
      <xs:union memberTypes="xs:NCName xs:QName">
         <xs:simpleType>
            <xs:restriction base="xs:token">
               <xs:pattern value="Q?\{.*\}\i\c*"/>
            </xs:restriction>
         </xs:simpleType>
      </xs:union>
   </xs:simpleType>
   <xs:simpleType name="fileNameType">
      <xs:annotation>
         <xs:documentation> A file name, usually for output. Currently implemented simply as a string.
      </xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string"/>
   </xs:simpleType>
   <xs:simpleType name="itemTypeType">
      <xs:annotation>
         <xs:documentation> An XPath item type, such as "item()", "node()", "element(*, xs:anyType)",
        or "xs:string". Currently implemented simply as a string. </xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:minLength value="1"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="javaClassNameType">
      <xs:annotation>
         <xs:documentation> A fully-qualified Java class name: a sequence of identifiers separated by
        periods, where each identifier starts with a letter (or dollar or underscore), and continues
        with letters or digits (or dollar or underscore). The definition of "letter" used in this
        regular expression does not exactly match the Java definition, but the differences are
        unlikely to matter. May also be a zero-length string to indicate the default value.
      </xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:pattern value="(([\p{L}$_][\p{L}$_0-9]*)(\.[\p{L}$_][\p{L}$_0-9]*)*)?"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="listOfQNameType">
      <xs:annotation>
         <xs:documentation> A space-separated list of QNames. Used in serialization parameters such as
        cdata-section-elements. The QNames may be written either in lexical form (prefix:uri) or in
        URI-qualified form (Q{uri}local)</xs:documentation>
      </xs:annotation>
      <xs:list itemType="c:EQName"/>
   </xs:simpleType>
   <xs:simpleType name="listOfQNameOrStarType">
      <xs:annotation>
         <xs:documentation> A space-separated list of QNames, also allowing (one) "*" token
        to separate the QNames at the start of the ordering from the QNames at the end. 
        Used in the serialization parameter saxon:attribute-order
        The QNames may be written either in lexical form (prefix:uri) or in
        URI-qualified form (Q{uri}local). No duplicate tokens are allowed (in particular,
        "*" must not be repeated).</xs:documentation>
      </xs:annotation>
      <xs:restriction>
         <xs:simpleType>
            <xs:list itemType="c:EQNameOrStar"/>
         </xs:simpleType>
         <xs:assertion test="count($value) eq count(distinct-values($value))"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="EQNameOrStar">
      <xs:union memberTypes="c:EQName">
         <xs:simpleType>
            <xs:restriction base="xs:string">
               <xs:enumeration value="*"/>
            </xs:restriction>
         </xs:simpleType>
      </xs:union>
   </xs:simpleType>
   <xs:simpleType name="uriQualifiedName">
      <xs:restriction base="xs:string">
         <xs:pattern value="Q\{[^\s\}]\}\i\c+"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="listOfPropertyNameType">
      <xs:annotation>
         <xs:documentation> A space-separated list of (JSON) property names, used
          in the saxon:property-order serialization attribute
          The property name can be any string containing no whitespace; the token "*"
          is interpreted as a special marker (but is not treated differently in the schema). 
          No duplicate tokens are allowed (in particular,
          "*" must not be repeated).</xs:documentation>
      </xs:annotation>
      <xs:restriction>
         <xs:simpleType>
            <xs:list itemType="xs:token"/>
         </xs:simpleType>
         <xs:assertion test="count($value) eq count(distinct-values($value))"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="occurrenceLimitsType">
      <xs:annotation>
         <xs:documentation> Highest values of minOccurs/maxOccurs for which accurate finite state
        automata should be generated during schema compilation. High limits can cause a large amount
        of memory to be used. Occurrence limits greater than these values may be non-strictly
        enforced. Format is a pair of integers, comma-separated. </xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:pattern value="[0-9]+,\s*[0-9]+"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="recoveryPolicyType">
      <xs:annotation>
         <xs:documentation> Defines how an XSLT processor will handle recoverable errors. One of:
        recoverSilently (take the recovery action and continue silently), recoverWithWarnings
        (take the recovery action and continue with a warning), doNotRecover (terminate with a fatal
        error). </xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="recoverSilently">
            <xs:annotation>
               <xs:documentation> For XSLT recoverable dynamic errors, Saxon recovers silently
          </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="recoverWithWarnings">
            <xs:annotation>
               <xs:documentation> For XSLT recoverable dynamic errors, Saxon recovers but outputs a
            warning </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="doNotRecover">
            <xs:annotation>
               <xs:documentation> For XSLT recoverable dynamic errors, Saxon reports an error and does
            not recover </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="regexEngineType">
      <xs:annotation>
         <xs:documentation>Identifies a regular expression engine</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="S">
            <xs:annotation>
               <xs:documentation> 
            The Saxon regular expression engine
          </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="J">
            <xs:annotation>
               <xs:documentation> 
            The Java JDK regular expression engine
          </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="N">
            <xs:annotation>
               <xs:documentation> 
            The regular expression engine in Microsoft .NET
          </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="schemaValidationType">
      <xs:annotation>
         <xs:documentation> A request for schema validation (or non-validation). One of: strict
        (validation must be performed), lax (validation performed if an element declaration is
        available), preserve (existing type annotations are retained), strip (no validation performed,
        existing type annotations are dropped). </xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="strict">
            <xs:annotation>
               <xs:documentation> Strict validation: an element declaration must be present and the
            instance must be valid </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="lax">
            <xs:annotation>
               <xs:documentation> Lax validation: if an element declaration is present then the instance
            must be valid </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="preserve">
            <xs:annotation>
               <xs:documentation> Existing type annotations are preserved when copying, no validation
            takes place </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="strip">
            <xs:annotation>
               <xs:documentation> Existing type annotations are discarded when copying, no validation
            takes place </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="strengthType">
      <xs:annotation>
         <xs:documentation> Defines the values of the strength property of a collation. Defines which
        properties of a string are considered significant. One of: primary, secondary, tertiary, or
        identical. </xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="primary"/>
         <xs:enumeration value="secondary"/>
         <xs:enumeration value="tertiary"/>
         <xs:enumeration value="identical"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="streamabilityType">
      <xs:annotation>
         <xs:documentation> Determines the test that Saxon applies to determine whether a construct is
        streamable, in cases where streaming is requested. One of: off, standard, extended.
      </xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="off">
            <xs:annotation>
               <xs:documentation> All constructs are treated as non-streamable. This is the only option
            available when using a Saxon version or license that does not enable streaming.
          </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="standard">
            <xs:annotation>
               <xs:documentation> Saxon applies the rules in the W3C XSLT 3.0 specification as closely as
            possible. (Exact compliance is not always possible.) </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="extended">
            <xs:annotation>
               <xs:documentation> Use of Saxon streaming extensions is permitted. This is the default
            when using Saxon-EE with a suitable license. </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="stripSpaceType">
      <xs:annotation>
         <xs:documentation> Option for stripping whitespace in source documents. One of: all (all
        whitespace text nodes are removed, unless xml:space="preserve" is present), none (no
        whitespace text nodes are removed), ignorable (whitespace text nodes in element-only
        content (identified by schema or DTD) are stripped) </xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="all">
            <xs:annotation>
               <xs:documentation> All whitespace-only text nodes are removed from the source document
          </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="none">
            <xs:annotation>
               <xs:documentation> No whitespace-only text nodes are removed from the source document
          </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="ignorable">
            <xs:annotation>
               <xs:documentation> Whitespace-only text nodes are removed from the source document if the
            containing element is described in a DTD or schema as having element-only content
          </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="treeModelType">
      <xs:annotation>
         <xs:documentation> Choice of XDM tree model implementation for representing source documents.
        One of: linkedTree (mutable tree using one Java object per node), tinyTree (compact
        immutable tree, the default), tinyTreeCondensed (tinyTree with extra compression of text and
        attribute values) </xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="linkedTree">
            <xs:annotation>
               <xs:documentation> Saxon linked tree implementation (one object per node). Useful for
            XQuery update. </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="tinyTree">
            <xs:annotation>
               <xs:documentation> Saxon tiny tree implementation: the default choice. A compact tree
            offering fast navigation. </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="tinyTreeCondensed">
            <xs:annotation>
               <xs:documentation> Saxon condensed tiny tree implementation: reduces memory usage but
            takes longer to build; no performance penalty during tree navigation.
          </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="yesOrNoType">
      <xs:annotation>
         <xs:documentation> Used for serialization parameters, and for collation parameters. One of:
        yes, no. </xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="yes">
            <xs:annotation>
               <xs:documentation> Sets the option on. </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="no">
            <xs:annotation>
               <xs:documentation> Sets the option off. </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="yesOrNoOrOmitType">
      <xs:annotation>
         <xs:documentation> Used for "standalone" serialization parameter. One of: yes, no, omit.
      </xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="yes">
            <xs:annotation>
               <xs:documentation> Sets standalone="yes" in the XML declaration. </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="no">
            <xs:annotation>
               <xs:documentation> Sets standalone="no" in the XML declaration. </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="omit">
            <xs:annotation>
               <xs:documentation> There will be no 'standalone' attribute in the XML declaration.
          </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="yesOrNoOrCodepointType">
      <xs:annotation>
         <xs:documentation> Used for "alphanumeric" property of a collation. One of: yes, no,
        codepoint. </xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:enumeration value="yes">
            <xs:annotation>
               <xs:documentation> Selects a collation in which a sequence of digits is treated as a
            number: AA100 sorts after AA99 </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="no">
            <xs:annotation>
               <xs:documentation> Selects a collation in which digits are sorted as individual
            characters: AA100 sorts before AA99 </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
         <xs:enumeration value="codepoint">
            <xs:annotation>
               <xs:documentation> Selects a collation in which a sequence of digits is treated as a
            number (AA100 sorts after AA99), and other characters are sorted by Unicode codepoint
            value </xs:documentation>
            </xs:annotation>
         </xs:enumeration>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="exprType">
      <xs:annotation>
         <xs:documentation>Type for XPath expressions</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string"/>
   </xs:simpleType>
</xs:schema>
