name: Update the Blacklist

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
        if: github.event_name == 'schedule'

      - name: Create Tag
        id: create_tag
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            tag=auto-build-$(date +%Y%m%d)
          else
            tag=manual-build-$(date +%Y%m%d-%H%M%S)
          fi
          echo "::set-output name=tag::$tag"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.tag }}
          release_name: ${{ steps.create_tag.outputs.tag }}
          draft: true
          prerelease: false

      - name: Create artifact files
        run: |
          mkdir info
          echo "${{ steps.create_release.outputs.id }}" > info/release_id
          echo "${{ steps.create_release.outputs.upload_url }}" > info/upload_url
      - uses: actions/upload-artifact@v1
        with:
          name: info
          path: info

  update:
    needs: [release]
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/download-artifact@v1
        with:
          name: info

      - name: Set upload_url
        id: upload_info
        run: |
          upload_url=$(cat info/upload_url)
          echo "::set-output name=upload_url::$upload_url"

      - name: Clone Repo
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - name: Set Script Permissions
        run: |
          chmod 777 ./scripts/setup.sh
          chmod 777 ./scripts/build.sh

      - name: Install Dependencies
        run: ./scripts/setup.sh
        shell: bash

      - name: Create Builds
        run: ./scripts/build.sh
        shell: bash

      - name: Upload Domains Build
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.upload_info.outputs.upload_url }}
          asset_path: ./black_domains.tar.gz
          asset_name: black_domains.tar.gz
          asset_content_type: application/gzip

      - name: Upload IPv4 Build
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.upload_info.outputs.upload_url }}
          asset_path: ./black_ipv4.tar.gz
          asset_name: black_ipv4.tar.gz
          asset_content_type: application/gzip

      - name: Upload IPv6 Build
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.upload_info.outputs.upload_url }}
          asset_path: ./black_ipv6.tar.gz
          asset_name: black_ipv6.tar.gz
          asset_content_type: application/gzip

  publish:
    needs: [update]
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/download-artifact@v1
        with:
          name: info

      - name: Set publish_info
        id: publish_info
        run: |
          release_id=$(cat info/release_id)
          echo "::set-output name=release_id::$release_id"

      - uses: eregon/publish-release@v1.0.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.publish_info.outputs.release_id }}

      - uses: eregon/keep-last-n-releases@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          n: 3
